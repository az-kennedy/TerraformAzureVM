terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "2.92.0"
    }
  }
}

# Setup
provider "azurerm" {
  features {}
}

resource "azurerm_resource_group" "dev" {
  name     = "rg-AzureVMs"
  location = "eastus"

  tags = {
    "Terraform" : "true"
    "Environment" : "dev"
  }
}

# Build out the network
module "network" {
  source              = "Azure/network/azurerm"
  resource_group_name = azurerm_resource_group.dev.name
  address_spaces      = ["10.0.0.0/16"]
  subnet_prefixes     = ["10.0.0.0/24", "10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
  subnet_names        = ["Sub1", "Sub2", "Sub3", "Sub4"]

  tags = {
    "Terraform" : "true"
    "Environment" : "dev"
  }

  depends_on = [azurerm_resource_group.dev]
}

resource "azurerm_network_security_group" "redhat-dev" {
  name                = "vmredhat-sg"
  location            = azurerm_resource_group.dev.location
  resource_group_name = azurerm_resource_group.dev.name

  security_rule {
    name                       = "ssh"
    priority                   = 100
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "22"
    source_address_prefix      = module.network.vnet_address_space.0
    destination_address_prefix = "*"
  }
  
  /*
  security_rule {
    name                       = "rule2"
    priority                   = 101
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "*"
    source_address_prefix      = "23.125.203.160"
    destination_address_prefix = "*"
  }
  */

  tags = {
    "Terraform" : "true"
    "Environment" : "dev"
  }
}

/*
resource "azurerm_subnet_network_security_group_association" "dev" {
  subnet_id                 = module.network.vnet_subnets.0
  network_security_group_id = azurerm_network_security_group.dev.id
}
*/

# Build the VMs for Subnet 1

/*
resource "azurerm_public_ip" "vmip" {
  name                = "publicIPVM"
  location            = azurerm_resource_group.dev.location
  resource_group_name = azurerm_resource_group.dev.name
  allocation_method   = "Static"

  tags = {
    "Terraform" : "true"
    "Environment" : "dev"
  }
}
*/

resource "azurerm_network_interface" "dev" {
  count                = 2
  name                 = "vmlinuxrh2022-${count.index}"
  location             = azurerm_resource_group.dev.location
  resource_group_name  = azurerm_resource_group.dev.name

  ip_configuration {
    name                          = "devConfiguration"
    subnet_id                     = module.network.vnet_subnets.0
    private_ip_address_allocation = "dynamic"
    #public_ip_address_id          = azurerm_public_ip.vmip.id
  }

  tags = {
    "Terraform" : "true"
    "Environment" : "dev"
  }
}

resource "azurerm_managed_disk" "dev" {
  count                = 2
  name                 = "datadisk_existing_${count.index}"
  location             = azurerm_resource_group.dev.location
  resource_group_name  = azurerm_resource_group.dev.name
  storage_account_type = "Standard_LRS"
  create_option        = "Empty"
  disk_size_gb         = "256"

  tags = {
    "Terraform" : "true"
    "Environment" : "dev"
  }
}

resource "azurerm_availability_set" "dev" {
  name                         = "avset"
  location                     = azurerm_resource_group.dev.location
  resource_group_name          = azurerm_resource_group.dev.name
  platform_fault_domain_count  = 2
  platform_update_domain_count = 2
  managed                      = true

  tags = {
    "Terraform" : "true"
    "Environment" : "dev"
  }
}

resource "azurerm_virtual_machine" "dev" {
  count                            = 2
  name                             = "vmdev-${count.index}"
  location                         = azurerm_resource_group.dev.location
  availability_set_id              = azurerm_availability_set.dev.id
  resource_group_name              = azurerm_resource_group.dev.name
  network_interface_ids            = [element(azurerm_network_interface.dev.*.id, count.index)]
  vm_size                          = "Standard_DS1_v2"
  delete_os_disk_on_termination    = true
  delete_data_disks_on_termination = true

  storage_image_reference {
    publisher = "RedHat"
    offer     = "RHEL"
    sku       = "7.4"
    version   = "latest"
  }

  storage_os_disk {
    name              = "myosdisk-${count.index}"
    caching           = "ReadWrite"
    create_option     = "FromImage"
    managed_disk_type = "Standard_LRS"
  }

  storage_data_disk {
    name            = element(azurerm_managed_disk.dev.*.name, count.index)
    managed_disk_id = element(azurerm_managed_disk.dev.*.id, count.index)
    create_option   = "Attach"
    lun             = 1
    disk_size_gb    = element(azurerm_managed_disk.dev.*.disk_size_gb, count.index)
  }

  os_profile {
    computer_name  = "hostname"
    admin_username = "testadmin"
    admin_password = "Password1234!"
  }

  os_profile_linux_config {
    disable_password_authentication = false
  }

  tags = {
    "Terraform" : "true"
    "Environment" : "dev"
  }
}

# Build out the VM for Subnet 3
resource "azurerm_network_security_group" "redhat-dev-sub3" {
  name                = "vmredhat-sg-sub3"
  location            = azurerm_resource_group.dev.location
  resource_group_name = azurerm_resource_group.dev.name

  security_rule {
    name                       = "AllowInternal"
    priority                   = 100
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = ""
    source_port_range          = "*"
    destination_port_range     = "*"
    source_address_prefix      = module.network.vnet_address_space.0
    destination_address_prefix = "*"
  }

  tags = {
    "Terraform" : "true"
    "Environment" : "dev"
  }
}

resource "azurerm_subnet_network_security_group_association" "example" {
  count = 4
  subnet_id                 = element(module.network.vnet_subnets.*, count.index)
  network_security_group_id = azurerm_network_security_group.redhat-dev-sub3.id
}

resource "azurerm_network_interface" "dev-sub3" {
  name                 = "vmlinuxrh2022-sub3"
  location             = azurerm_resource_group.dev.location
  resource_group_name  = azurerm_resource_group.dev.name

  ip_configuration {
    name                          = "devConfiguration"
    subnet_id                     = module.network.vnet_subnets.2
    private_ip_address_allocation = "dynamic"
    #public_ip_address_id          = azurerm_public_ip.vmip.id
  }

  tags = {
    "Terraform" : "true"
    "Environment" : "dev"
  }
}

resource "azurerm_managed_disk" "dev-sub3" {
  name                 = "datadisk_existing_sub3"
  location             = azurerm_resource_group.dev.location
  resource_group_name  = azurerm_resource_group.dev.name
  storage_account_type = "Standard_LRS"
  create_option        = "Empty"
  disk_size_gb         = "32"

  tags = {
    "Terraform" : "true"
    "Environment" : "dev"
  }
}

resource "azurerm_virtual_machine" "dev-sub3" {
  name                             = "vmdev-sub3"
  location                         = azurerm_resource_group.dev.location
  availability_set_id              = azurerm_availability_set.dev.id
  resource_group_name              = azurerm_resource_group.dev.name
  network_interface_ids            = [azurerm_network_interface.dev-sub3.id]
  vm_size                          = "Standard_DS1_v2"
  delete_os_disk_on_termination    = true
  delete_data_disks_on_termination = true

  storage_image_reference {
    publisher = "RedHat"
    offer     = "RHEL"
    sku       = "7.4"
    version   = "latest"
  }

  storage_os_disk {
    name              = "myosdisk-sub3"
    caching           = "ReadWrite"
    create_option     = "FromImage"
    managed_disk_type = "Standard_LRS"
  }

  storage_data_disk {
    name            = azurerm_managed_disk.dev-sub3.name
    managed_disk_id = azurerm_managed_disk.dev-sub3.id
    create_option   = "Attach"
    lun             = 1
    disk_size_gb    = azurerm_managed_disk.dev-sub3.disk_size_gb
  }

  os_profile {
    computer_name  = "hostname"
    admin_username = "testadmin"
    admin_password = "Password1234!"
  }

  os_profile_linux_config {
    disable_password_authentication = false
  }

  tags = {
    "Terraform" : "true"
    "Environment" : "dev"
  }
}

resource "azurerm_virtual_machine_extension" "dev-sub3" {
  name                 = "apache"
  virtual_machine_id   = azurerm_virtual_machine.dev-sub3.id
  publisher            = "Microsoft.Azure.Extensions"
  type                 = "CustomScript"
  type_handler_version = "2.0"

  settings = <<SETTINGS
    {
        "fileUris": [ "https://raw.githubusercontent.com/thomaskennedy1066/TerraformAzureVM/main/apache.sh" ],
        "commandToExecute": "bash apache.sh exit 0"
    }
  SETTINGS


  tags = {
    "Terraform" : "true"
    "Environment" : "dev"
  }
}

# Build out the Load Balancer
resource "azurerm_public_ip" "lbip" {
  name                = "publicIPForLB"
  location            = azurerm_resource_group.dev.location
  resource_group_name = azurerm_resource_group.dev.name
  allocation_method   = "Static"

  tags = {
    "Terraform" : "true"
    "Environment" : "dev"
  }
}



# Output to the Concole 
output "Internal_NIC1" {
  value       = azurerm_network_interface.dev.0.private_ip_address
  description = "IP of the first NIC"
}

output "Internal_NIC2" {
  value       = azurerm_network_interface.dev.1.private_ip_address
  description = "IP of the second NIC"
}

output "LB_IP" {
  value       = azurerm_public_ip.lbip.ip_address
  description = "Public IP of the load balancer"
}